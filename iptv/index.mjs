import fs from "node:fs";import path from "node:path";import { fileURLToPath } from "node:url";const __filename = fileURLToPath(import.meta.url);const __dirname = path.dirname(__filename);// --- Configuration ---const sourceFile = path.join(__dirname, "Source.md");const cleanedSourceFile = path.join(__dirname, "Source.cleaned.md");const processedCsvFile = path.join(__dirname, "temp_processed.md");const generatedM3uFile = path.join(__dirname, "index.m3u"); // Generated from Source.mdconst finalM3uFile = path.join(__dirname, "All.m3u");const otherM3uFiles = [    "18.m3u",    "Food.m3u",    "Foreign.m3u",    "Music.m3u",    "Online.m3u",    "Other.m3u",    "Sketches.m3u",];/** * Step 1: Reads the source file, removes duplicate URLs, and saves it to a new file. * (Based on removeDuplicate.mjs) */function removeDuplicates() {    console.log(`Step 1: Reading ${sourceFile} and removing duplicate URLs.`);    if (!fs.existsSync(sourceFile)) {        console.error(`Error: Source file not found at ${sourceFile}`);        process.exit(1);    }    const fileContent = fs.readFileSync(sourceFile, "utf8");    const lines = fileContent.split("\n");    const seenUrls = new Set();    const uniqueLines = [];    lines.forEach((line) => {        if (line.trim().startsWith("http")) {            const url = line.trim();            if (!seenUrls.has(url)) {                seenUrls.add(url);                uniqueLines.push(line);            }        } else {            uniqueLines.push(line);        }    });    fs.writeFileSync(cleanedSourceFile, uniqueLines.join("\n"), "utf8");    console.log(`-> Duplicates removed. Cleaned file saved to ${cleanedSourceFile}`);}/** * Step 2: Processes the cleaned file to a "Channel,Name,URL" format. * (Based on temp.mjs) */function processToCsv() {    console.log(`Step 2: Processing ${cleanedSourceFile} into a CSV-like format.`);    const fileContent = fs.readFileSync(cleanedSourceFile, "utf8");    const lines = fileContent.split("\n");    const processedLines = [];    let lineText = "";    lines.forEach((line) => {        const trimmedLine = line.trim();        if (trimmedLine.includes("#genre#")) {            processedLines.push(trimmedLine);        } else if (trimmedLine.startsWith("http")) {            lineText += trimmedLine;            processedLines.push(lineText);            lineText = "";        } else if (trimmedLine !== "") {            lineText += trimmedLine + ",";        } else {            processedLines.push(""); // Preserve empty lines        }    });    fs.writeFileSync(processedCsvFile, processedLines.join("\n"), "utf8");    console.log(`-> Processed file saved to ${processedCsvFile}`);}/** * Step 3: Converts the processed CSV-like file to an M3U playlist. * (Based on toM3u.mjs with improved parsing) */function convertToM3u() {    console.log(`Step 3: Converting ${processedCsvFile} to M3U format.`);    const fileContent = fs.readFileSync(processedCsvFile, "utf8");    const lines = fileContent.split("\n");    let m3uOutput = `#EXTM3U x-tvg-url="https://live.fanmingming.cn/e.xml"\n`;    let currentGroup = null;    lines.forEach((line) => {        const trimmedLine = line.trim();        if (trimmedLine) {            if (trimmedLine.includes("#genre#")) {                currentGroup = trimmedLine.replace(/,#genre#/, "").trim();            } else {                const parts = trimmedLine.split(",");                if (parts.length >= 2) {                    const channelLink = parts.pop().trim();                    const originalChannelName = parts.join(",").trim();                    if (originalChannelName && channelLink.startsWith("http")) {                        const processedChannelName = originalChannelName.replace(/(CCTV|CETV)-(\d+).*/, "$1$2");                        m3uOutput += `#EXTINF:-1 tvg-name="${processedChannelName}" tvg-logo="https://live.fanmingming.cn/tv/${processedChannelName}.png"`;                        if (currentGroup) {                            m3uOutput += ` group-title="${currentGroup}"`;                        }                        m3uOutput += `,${originalChannelName}\n${channelLink}\n`;                    }                }            }        }    });    fs.writeFileSync(generatedM3uFile, m3uOutput, "utf8");    console.log(`-> M3U file created at ${generatedM3uFile}`);}/** * Step 4: Merges the newly generated M3U file with other existing M3U files. * (Based on index.mjs) */function mergeAllM3uFiles() {    console.log("Step 4: Merging all M3u files.");    const filesToMerge = [...otherM3uFiles, generatedM3uFile];    let content = `#EXTM3U x-tvg-url="https://live.fanmingming.cn/e.xml"\n`;    for (const file of filesToMerge) {        const filePath = path.isAbsolute(file) ? file : path.join(__dirname, file);        if (fs.existsSync(filePath)) {            console.log(`   - Merging ${file}`);            const fileContent = fs.readFileSync(filePath, "utf-8");            const lines = fileContent.split("\n");            for (const line of lines) {                const trimmedLine = line.trim();                if (trimmedLine && !trimmedLine.startsWith("#EXTM3U")) {                    content += line + "\n";                }            }        } else {            console.warn(`   - Warning: File not found, skipping: ${filePath}`);        }    }    fs.writeFileSync(finalM3uFile, content);    console.log(`-> All M3U files merged into ${finalM3uFile}`);}/** * Main function to run the entire pipeline. */function main() {    console.log("Starting IPTV processing pipeline...");    removeDuplicates();    processToCsv();    convertToM3u();    mergeAllM3uFiles();        // Clean up intermediate files    fs.unlinkSync(cleanedSourceFile);    fs.unlinkSync(processedCsvFile);        console.log("\nPipeline finished successfully!");    console.log(`Final output is in ${finalM3uFile}`);}// Run the scriptmain();